priority -3

###########
# test
###########
# 当前行转换成大写
snippet "([^\s].*)\.upper" "Uppercase(postfix)" r
`!p snip.rv = match.group(1).upper()`$0
endsnippet

snippet "((while|if|else).*)==(.*)\.n" "" r
`!p snip.rv = match.group(1) + '!=' + match.group(3)`${0}
endsnippet

snippet "((if|else|while)[^\(]*\()([^=]+)\.n" "" r
`!p snip.rv = match.group(1) + '!' + match.group(3)`${0}
endsnippet

snippet time "" w
/* `date +%T` */ ${0}
endsnippet

snippet inio "#include <iostream>" w
#include <iostream>
endsnippet

snippet incf "#include local header"
#include "${1}"${0}
endsnippet

snippet incs "#include <cstdio>" w
#include <cstdio>${0}
endsnippet

snippet inal "#include <algorithm>" w
#include <algorithm>${0}
endsnippet

snippet inl "#include <>" w
#include <${0}>
endsnippet

snippet scan "scanf function"
scanf("%d${1}", &${0});
endsnippet

snippet uns "using namespace std"
using namespace std;
endsnippet

snippet while "while"
while(${1:true}) {
    ${2}
}
endsnippet
snippet whi "while"
while(${1:true}) {
    ${0}
}
endsnippet

snippet tm "template" w
template <typename t>
${0}
endsnippet

snippet fi "if" w
if( ${1:true} ) 
    ${2}
endsnippet

snippet th "this->" w
this->${0}
endsnippet


snippet tt "<t>" w
<t> ${1}
endsnippet

snippet st "std::"
std::${1}
endsnippet

snippet cend "cout << endl;" w
std::cout << "\n";
endsnippet

snippet vor "vector" w
vector<${1:double}> ${2:vec};
endsnippet

snippet pri "printf(\n);" w
printf("${1}");${2}
endsnippet

snippet pp " " w
printf("%${1}", ${2});${3}
endsnippet


######################
# system
######################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
map<${1:key}, ${2:value}> ${0};
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:

